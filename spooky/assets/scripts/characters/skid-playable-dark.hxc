import funkin.play.character.MultiSparrowCharacter;
import flixel.FlxG;
import flixel.util.FlxTimer;
import funkin.play.PlayState;
import funkin.play.PauseSubState;
import funkin.graphics.FunkinSprite;
import funkin.play.character.SparrowCharacter;
import funkin.play.character.CharacterType;
import funkin.play.character.CharacterDataParser;
import funkin.play.GameOverSubState;
import StringTools;

class SkidPlayableDarkCharacter extends MultiSparrowCharacter
{
	function new()
	{
		super('skid-playable-dark');
	}

	var normalChar:BaseCharacter;

	override function set_alpha(val:Float):Float
	{
		super.set_alpha(val);
		if(val != 1)
			normalChar.alpha = 1;
		else
			normalChar.alpha = 0;

    return val;
	}

	function onNoteHit(event:HitNoteScriptEvent)
	{
		// Override the hit note animation.

		if (event.note.noteData.getMustHitNote() && characterType == CharacterType.BF)
		{
			switch (event.note.kind)
			{
				case "Cheer":
					holdTimer = 0;
					this.playAnimation('cheer', false);
				case "cheer":
					holdTimer = 0;
					this.playAnimation('cheer', false);
				default:
					holdTimer = 0;
					this.playSingAnimation(event.note.noteData.getDirection(), false);
			}
		}
	}

	override function playAnimation(name:String, restart:Bool, ignoreOther:Bool) {
			super.playAnimation(name, restart, ignoreOther);
      if(normalChar != null){
        normalChar.playAnimation(name, restart, ignoreOther);
        normalChar.setPosition(this.x, this.y);
      }
	}

	override function onGameOver(event:ScriptEvent):Void {
		super.onGameOver(event);
	}

	override function onSongRetry(event:ScriptEvent):Void {
		super.onSongRetry(event);

		// Don't let these pile up.

		// Reset to standard death animation.
		GameOverSubState.musicSuffix = '-spooky';
		GameOverSubState.blueBallSuffix = '-spooky';

		PauseSubState.musicSuffix = '-spooky';

		this.visible = true;
	}

	function onCreate(event:ScriptEvent)
	{
		super.onCreate(event);
		
		normalChar = CharacterDataParser.fetchCharacter('skid-playable');
		normalChar.zIndex = 199;
		normalChar.alpha = 0;
		normalChar.flipX = false;

		PlayState.instance.currentStage.add(normalChar);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		GameOverSubState.musicSuffix = '-spooky';
		GameOverSubState.blueBallSuffix = '-spooky';

		PauseSubState.musicSuffix = '-spooky';
	}
	
	public override function getDeathCameraOffsets():Array<Float> {
		var result = super.getDeathCameraOffsets();

		return [result[0] - 420, result[1]];
	}
}
